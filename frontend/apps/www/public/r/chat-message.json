{
  "name": "chat-message",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "https://shadcn-chatbot-kit.vercel.app/r/copy-button.json",
    "https://shadcn-chatbot-kit.vercel.app/r/markdown-renderer.json"
  ],
  "files": [
    {
      "path": "ui/chat-message.tsx",
      "content": "\"use client\"\n\nimport React, { useMemo } from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { Code2, Loader2, Terminal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { FilePreview } from \"@/registry/default/ui/file-preview\"\nimport { MarkdownRenderer } from \"@/registry/default/ui/markdown-renderer\"\n\nconst chatBubbleVariants = cva(\n  \"group/message relative break-words rounded-lg p-3 text-sm sm:max-w-[70%]\",\n  {\n    variants: {\n      isUser: {\n        true: \"bg-primary text-primary-foreground\",\n        false: \"bg-muted text-foreground\",\n      },\n      animation: {\n        none: \"\",\n        slide: \"duration-300 animate-in fade-in-0\",\n        scale: \"duration-300 animate-in fade-in-0 zoom-in-75\",\n        fade: \"duration-500 animate-in fade-in-0\",\n      },\n    },\n    compoundVariants: [\n      {\n        isUser: true,\n        animation: \"slide\",\n        class: \"slide-in-from-right\",\n      },\n      {\n        isUser: false,\n        animation: \"slide\",\n        class: \"slide-in-from-left\",\n      },\n      {\n        isUser: true,\n        animation: \"scale\",\n        class: \"origin-bottom-right\",\n      },\n      {\n        isUser: false,\n        animation: \"scale\",\n        class: \"origin-bottom-left\",\n      },\n    ],\n  }\n)\n\ntype Animation = VariantProps<typeof chatBubbleVariants>[\"animation\"]\n\ninterface Attachment {\n  name?: string\n  contentType?: string\n  url: string\n}\n\ninterface PartialToolCall {\n  state: \"partial-call\"\n  toolName: string\n}\n\ninterface ToolCall {\n  state: \"call\"\n  toolName: string\n}\n\ninterface ToolResult {\n  state: \"result\"\n  toolName: string\n  result: any\n}\n\ntype ToolInvocation = PartialToolCall | ToolCall | ToolResult\n\nexport interface Message {\n  id: string\n  role: \"user\" | \"assistant\" | (string & {})\n  content: string\n  createdAt?: Date\n  experimental_attachments?: Attachment[]\n  toolInvocations?: ToolInvocation[]\n}\n\nexport interface ChatMessageProps extends Message {\n  showTimeStamp?: boolean\n  animation?: Animation\n  actions?: React.ReactNode\n  className?: string\n}\n\nexport const ChatMessage: React.FC<ChatMessageProps> = ({\n  role,\n  content,\n  createdAt,\n  showTimeStamp = false,\n  animation = \"scale\",\n  actions,\n  className,\n  experimental_attachments,\n  toolInvocations,\n}) => {\n  const files = useMemo(() => {\n    return experimental_attachments?.map((attachment) => {\n      const dataArray = dataUrlToUint8Array(attachment.url)\n      const file = new File([dataArray], attachment.name ?? \"Unknown\")\n      return file\n    })\n  }, [experimental_attachments])\n\n  if (toolInvocations && toolInvocations.length > 0) {\n    return <ToolCall toolInvocations={toolInvocations} />\n  }\n\n  const isUser = role === \"user\"\n\n  const formattedTime = createdAt?.toLocaleTimeString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  })\n\n  return (\n    <div className={cn(\"flex flex-col\", isUser ? \"items-end\" : \"items-start\")}>\n      {files ? (\n        <div className=\"mb-1 flex flex-wrap gap-2\">\n          {files.map((file, index) => {\n            return <FilePreview file={file} key={index} />\n          })}\n        </div>\n      ) : null}\n\n      <div className={cn(chatBubbleVariants({ isUser, animation }), className)}>\n        <div>\n          <MarkdownRenderer>{content}</MarkdownRenderer>\n        </div>\n\n        {role === \"assistant\" && actions ? (\n          <div className=\"absolute -bottom-4 right-2 flex space-x-1 rounded-lg border bg-background p-1 text-foreground opacity-0 transition-opacity group-hover/message:opacity-100\">\n            {actions}\n          </div>\n        ) : null}\n      </div>\n\n      {showTimeStamp && createdAt ? (\n        <time\n          dateTime={createdAt.toISOString()}\n          className={cn(\n            \"mt-1 block px-1 text-xs opacity-50\",\n            animation !== \"none\" && \"duration-500 animate-in fade-in-0\"\n          )}\n        >\n          {formattedTime}\n        </time>\n      ) : null}\n    </div>\n  )\n}\n\nfunction dataUrlToUint8Array(data: string) {\n  const base64 = data.split(\",\")[1]\n  const buf = Buffer.from(base64, \"base64\")\n  return new Uint8Array(buf)\n}\n\nfunction ToolCall({\n  toolInvocations,\n}: Pick<ChatMessageProps, \"toolInvocations\">) {\n  if (!toolInvocations?.length) return null\n\n  return (\n    <div className=\"flex flex-col items-start gap-2\">\n      {toolInvocations.map((invocation, index) => {\n        switch (invocation.state) {\n          case \"partial-call\":\n          case \"call\":\n            return (\n              <div\n                key={index}\n                className=\"flex items-center gap-2 rounded-lg border bg-muted px-3 py-2 text-sm text-muted-foreground\"\n              >\n                <Terminal className=\"h-4 w-4\" />\n                <span>Calling {invocation.toolName}...</span>\n                <Loader2 className=\"h-3 w-3 animate-spin\" />\n              </div>\n            )\n          case \"result\":\n            return (\n              <div\n                key={index}\n                className=\"flex flex-col gap-1.5 rounded-lg border bg-muted px-3 py-2 text-sm\"\n              >\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Code2 className=\"h-4 w-4\" />\n                  <span>Result from {invocation.toolName}</span>\n                </div>\n                <pre className=\"overflow-x-auto whitespace-pre-wrap text-foreground\">\n                  {JSON.stringify(invocation.result, null, 2)}\n                </pre>\n              </div>\n            )\n        }\n      })}\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}